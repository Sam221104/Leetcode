//Concept Reference: https://www.youtube.com/watch?v=zyk-XzCiogk
class Solution {
    public int countCompleteComponents(int n, int[][] edges) {
        List<List<Integer>> adj = new ArrayList<>();
        for(int i=0; i<n; i++)
            adj.add(new ArrayList<>());
        for(int[] edge : edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        int completeComp = 0;
        boolean[] visited = new boolean[n];
        for(int i = 0; i<n; i++){
            if(!visited[i]){
                int[] node = new int[1];
                int[] edgeCount = new int[1];
                dfs(i, node, edgeCount, visited, adj);
                if (edgeCount[0] == node[0]*(node[0]-1))
                    completeComp++;
            }
        }
        return completeComp;
    }
    public static void dfs(int curr, int[] node, int[] edgeCount, boolean[] visited, List<List<Integer>> adj){
        node[0]++;
        visited[curr] = true;
        for(int i : adj.get(curr)){
            edgeCount[0]++;
            if(!visited[i]){
                dfs(i, node, edgeCount, visited, adj);
            }
        }
    }
}
